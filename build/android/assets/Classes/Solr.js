var $ = function (opts) {
  this.query = "*:*";
  this.endpoint = "https://openscience.hamburg.de/solrQuery/";
  this.querystring = ['fl=internal_institution,url,title,creatorName,creatorNameURI,publicationYear,language,abstract,collection', 'q=' + this.query, 'rows=150', 'facet=true', 'facet.sort=count'];
  ;

};

$.prototype.addFacetField = function (f) {
  this.querystring.push('facet.field=' + f);
};

$.prototype.startQuery = function (q, cb) {
  var querystring = this.querystring.join('&');

  if (!Ti.Network.online) {
    cb({
      success: false });

    return;
  }
  function sendBack(payload) {
    var facets = payload['facet_counts']['facet_fields'];
    var facetObj = {};
    Object.keys(facets).forEach(function (key) {
      facetObj[key] = sortFacets(facets[key]);
    });
    cb({
      success: true,
      docs: payload.response.docs,
      facets: facetObj });

  }

  if (Ti.App.Properties.hasProperty(querystring)) {
    sendBack(JSON.parse(Ti.App.Properties.getString(querystring)));
  }
  var xhr = Ti.Network.createHTTPClient({
    onload: function (e) {
      Ti.App.Properties.setString(querystring, this.responseData);
      sendBack(JSON.parse(this.responseData));
    },
    onerror: function (E) {
      cb({
        success: false });

    },
    timeout: 5000 });


  // don't forget the trailing /!
  xhr.open("POST", this.endpoint);
  xhr.setRequestHeader("SolrCoreName", "HOS");
  xhr.send(querystring);
  Log(this.endpoint + '?' + querystring);
};
$.prototype.setQuery = function (q) {
  this.query = q;
};
$.prototype.resetQuery = function (q) {
  this.query = "*:*";
};
$.prototype.addFacet = function (f) {
  this.querystring.push("fq=" + f);

};

$.prototype.hasFacet = function (f) {
  return this.querystring.indexOf("fq=" + f) == -1 ? false : true;
};

$.prototype.toggleFacet = function (f) {
  const found = this.querystring.indexOf("fq=" + f);
  if (found == -1) {// not yet filtered => add
    this.querystring.push("fq=" + f);
  } else {// filtered => remove
    this.querystring = this.querystring.filter(function (q) {
      return q != "fq=" + f;
    });
  }
};

$.prototype.removeFacet = function (f) {
  this.querystring = this.querystring.filter(function (q) {
    return q != "fq=" + f;
  });
};
$.prototype.removeAllFacets = function (f) {
  this.querystring = this.querystring.filter(function (q) {
    return q.substr(0, 3) != "fq=";
  });
};

function sortFacets(foo) {
  var bar = [];
  foo.forEach(function (f, i) {
    if (i % 2 == 0) {
      bar[i / 2] = {
        k: f.substr(0, 1).toUpperCase() + f.substr(1),
        v: foo[i + 1] };

    }
  });
  return bar.filter(function (item) {
    return item.k == 'Null' ? false : true;
  });
}

Array.prototype.max = function () {
  return Math.max.apply(null, this);
};

Array.prototype.min = function () {
  return Math.min.apply(null, this);
};

module.exports = $;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNvbHIuanMiXSwibmFtZXMiOlsiJCIsIm9wdHMiLCJxdWVyeSIsImVuZHBvaW50IiwicXVlcnlzdHJpbmciLCJwcm90b3R5cGUiLCJhZGRGYWNldEZpZWxkIiwiZiIsInB1c2giLCJzdGFydFF1ZXJ5IiwicSIsImNiIiwiam9pbiIsIlRpIiwiTmV0d29yayIsIm9ubGluZSIsInN1Y2Nlc3MiLCJzZW5kQmFjayIsInBheWxvYWQiLCJmYWNldHMiLCJmYWNldE9iaiIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5Iiwic29ydEZhY2V0cyIsImRvY3MiLCJyZXNwb25zZSIsIkFwcCIsIlByb3BlcnRpZXMiLCJoYXNQcm9wZXJ0eSIsIkpTT04iLCJwYXJzZSIsImdldFN0cmluZyIsInhociIsImNyZWF0ZUhUVFBDbGllbnQiLCJvbmxvYWQiLCJlIiwic2V0U3RyaW5nIiwicmVzcG9uc2VEYXRhIiwib25lcnJvciIsIkUiLCJ0aW1lb3V0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwiTG9nIiwic2V0UXVlcnkiLCJyZXNldFF1ZXJ5IiwiYWRkRmFjZXQiLCJoYXNGYWNldCIsImluZGV4T2YiLCJ0b2dnbGVGYWNldCIsImZvdW5kIiwiZmlsdGVyIiwicmVtb3ZlRmFjZXQiLCJyZW1vdmVBbGxGYWNldHMiLCJzdWJzdHIiLCJmb28iLCJiYXIiLCJpIiwiayIsInRvVXBwZXJDYXNlIiwidiIsIml0ZW0iLCJBcnJheSIsIm1heCIsIk1hdGgiLCJhcHBseSIsIm1pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLENBQUMsR0FBRyxVQUFTQyxJQUFULEVBQWU7QUFDdEIsT0FBS0MsS0FBTCxHQUFhLEtBQWI7QUFDQSxPQUFLQyxRQUFMLEdBQWdCLDJDQUFoQjtBQUNBLE9BQUtDLFdBQUwsR0FBbUIsQ0FBQywyR0FBRCxFQUE2RyxPQUFPLEtBQUtGLEtBQXpILEVBQStILFVBQS9ILEVBQTJJLFlBQTNJLEVBQXlKLGtCQUF6SixDQUFuQjtBQUNBOztBQUVBLENBTkQ7O0FBUUFGLENBQUMsQ0FBQ0ssU0FBRixDQUFZQyxhQUFaLEdBQTRCLFVBQVNDLENBQVQsRUFBWTtBQUN2QyxPQUFLSCxXQUFMLENBQWlCSSxJQUFqQixDQUFzQixpQkFBaUJELENBQXZDO0FBQ0EsQ0FGRDs7QUFJQVAsQ0FBQyxDQUFDSyxTQUFGLENBQVlJLFVBQVosR0FBeUIsVUFBU0MsQ0FBVCxFQUFZQyxFQUFaLEVBQWdCO0FBQ3hDLE1BQUlQLFdBQVcsR0FBRyxLQUFLQSxXQUFMLENBQWlCUSxJQUFqQixDQUFzQixHQUF0QixDQUFsQjs7QUFFQSxNQUFJLENBQUNDLEVBQUUsQ0FBQ0MsT0FBSCxDQUFXQyxNQUFoQixFQUF3QjtBQUN2QkosSUFBQUEsRUFBRSxDQUFDO0FBQ0ZLLE1BQUFBLE9BQU8sRUFBRyxLQURSLEVBQUQsQ0FBRjs7QUFHQTtBQUNBO0FBQ0QsV0FBU0MsUUFBVCxDQUFrQkMsT0FBbEIsRUFBMkI7QUFDMUIsUUFBSUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsY0FBRCxDQUFQLENBQXdCLGNBQXhCLENBQWI7QUFDQSxRQUFJRSxRQUFRLEdBQUcsRUFBZjtBQUNBQyxJQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWUgsTUFBWixFQUFvQkksT0FBcEIsQ0FBNEIsVUFBU0MsR0FBVCxFQUFjO0FBQ3pDSixNQUFBQSxRQUFRLENBQUNJLEdBQUQsQ0FBUixHQUFnQkMsVUFBVSxDQUFDTixNQUFNLENBQUNLLEdBQUQsQ0FBUCxDQUExQjtBQUNBLEtBRkQ7QUFHQWIsSUFBQUEsRUFBRSxDQUFDO0FBQ0ZLLE1BQUFBLE9BQU8sRUFBRyxJQURSO0FBRUZVLE1BQUFBLElBQUksRUFBR1IsT0FBTyxDQUFDUyxRQUFSLENBQWlCRCxJQUZ0QjtBQUdGUCxNQUFBQSxNQUFNLEVBQUdDLFFBSFAsRUFBRCxDQUFGOztBQUtBOztBQUVELE1BQUlQLEVBQUUsQ0FBQ2UsR0FBSCxDQUFPQyxVQUFQLENBQWtCQyxXQUFsQixDQUE4QjFCLFdBQTlCLENBQUosRUFBZ0Q7QUFDL0NhLElBQUFBLFFBQVEsQ0FBQ2MsSUFBSSxDQUFDQyxLQUFMLENBQVduQixFQUFFLENBQUNlLEdBQUgsQ0FBT0MsVUFBUCxDQUFrQkksU0FBbEIsQ0FBNEI3QixXQUE1QixDQUFYLENBQUQsQ0FBUjtBQUNBO0FBQ0QsTUFBSThCLEdBQUcsR0FBR3JCLEVBQUUsQ0FBQ0MsT0FBSCxDQUFXcUIsZ0JBQVgsQ0FBNEI7QUFDckNDLElBQUFBLE1BQU0sRUFBRyxVQUFTQyxDQUFULEVBQVk7QUFDcEJ4QixNQUFBQSxFQUFFLENBQUNlLEdBQUgsQ0FBT0MsVUFBUCxDQUFrQlMsU0FBbEIsQ0FBNEJsQyxXQUE1QixFQUF5QyxLQUFLbUMsWUFBOUM7QUFDQXRCLE1BQUFBLFFBQVEsQ0FBQ2MsSUFBSSxDQUFDQyxLQUFMLENBQVcsS0FBS08sWUFBaEIsQ0FBRCxDQUFSO0FBQ0EsS0FKb0M7QUFLckNDLElBQUFBLE9BQU8sRUFBRyxVQUFTQyxDQUFULEVBQVk7QUFDckI5QixNQUFBQSxFQUFFLENBQUM7QUFDRkssUUFBQUEsT0FBTyxFQUFHLEtBRFIsRUFBRCxDQUFGOztBQUdBLEtBVG9DO0FBVXJDMEIsSUFBQUEsT0FBTyxFQUFHLElBVjJCLEVBQTVCLENBQVY7OztBQWFBO0FBQ0FSLEVBQUFBLEdBQUcsQ0FBQ1MsSUFBSixDQUFTLE1BQVQsRUFBaUIsS0FBS3hDLFFBQXRCO0FBQ0ErQixFQUFBQSxHQUFHLENBQUNVLGdCQUFKLENBQXFCLGNBQXJCLEVBQXFDLEtBQXJDO0FBQ0FWLEVBQUFBLEdBQUcsQ0FBQ1csSUFBSixDQUFTekMsV0FBVDtBQUNBMEMsRUFBQUEsR0FBRyxDQUFDLEtBQUszQyxRQUFMLEdBQWdCLEdBQWhCLEdBQXFCQyxXQUF0QixDQUFIO0FBQ0EsQ0EzQ0Q7QUE0Q0FKLENBQUMsQ0FBQ0ssU0FBRixDQUFZMEMsUUFBWixHQUF1QixVQUFTckMsQ0FBVCxFQUFZO0FBQ2xDLE9BQUtSLEtBQUwsR0FBYVEsQ0FBYjtBQUNBLENBRkQ7QUFHQVYsQ0FBQyxDQUFDSyxTQUFGLENBQVkyQyxVQUFaLEdBQXlCLFVBQVN0QyxDQUFULEVBQVk7QUFDcEMsT0FBS1IsS0FBTCxHQUFhLEtBQWI7QUFDQSxDQUZEO0FBR0FGLENBQUMsQ0FBQ0ssU0FBRixDQUFZNEMsUUFBWixHQUF1QixVQUFTMUMsQ0FBVCxFQUFZO0FBQ2xDLE9BQUtILFdBQUwsQ0FBaUJJLElBQWpCLENBQXNCLFFBQVFELENBQTlCOztBQUVBLENBSEQ7O0FBS0FQLENBQUMsQ0FBQ0ssU0FBRixDQUFZNkMsUUFBWixHQUF1QixVQUFTM0MsQ0FBVCxFQUFZO0FBQ2xDLFNBQU8sS0FBS0gsV0FBTCxDQUFpQitDLE9BQWpCLENBQXlCLFFBQVE1QyxDQUFqQyxLQUFxQyxDQUFDLENBQXRDLEdBQTBDLEtBQTFDLEdBQWlELElBQXhEO0FBQ0EsQ0FGRDs7QUFJQVAsQ0FBQyxDQUFDSyxTQUFGLENBQVkrQyxXQUFaLEdBQTBCLFVBQVM3QyxDQUFULEVBQVk7QUFDckMsUUFBTThDLEtBQUssR0FBRyxLQUFLakQsV0FBTCxDQUFpQitDLE9BQWpCLENBQXlCLFFBQVE1QyxDQUFqQyxDQUFkO0FBQ0EsTUFBSThDLEtBQUssSUFBSSxDQUFDLENBQWQsRUFBaUIsQ0FBRTtBQUNsQixTQUFLakQsV0FBTCxDQUFpQkksSUFBakIsQ0FBc0IsUUFBUUQsQ0FBOUI7QUFDQSxHQUZELE1BRU8sQ0FBTztBQUNiLFNBQUtILFdBQUwsR0FBbUIsS0FBS0EsV0FBTCxDQUFpQmtELE1BQWpCLENBQXdCLFVBQVM1QyxDQUFULEVBQVk7QUFDdEQsYUFBT0EsQ0FBQyxJQUFJLFFBQVFILENBQXBCO0FBQ0EsS0FGa0IsQ0FBbkI7QUFHQTtBQUNELENBVEQ7O0FBV0FQLENBQUMsQ0FBQ0ssU0FBRixDQUFZa0QsV0FBWixHQUEwQixVQUFTaEQsQ0FBVCxFQUFZO0FBQ3JDLE9BQUtILFdBQUwsR0FBbUIsS0FBS0EsV0FBTCxDQUFpQmtELE1BQWpCLENBQXdCLFVBQVM1QyxDQUFULEVBQVk7QUFDdEQsV0FBT0EsQ0FBQyxJQUFJLFFBQVFILENBQXBCO0FBQ0EsR0FGa0IsQ0FBbkI7QUFHQSxDQUpEO0FBS0FQLENBQUMsQ0FBQ0ssU0FBRixDQUFZbUQsZUFBWixHQUE4QixVQUFTakQsQ0FBVCxFQUFZO0FBQ3pDLE9BQUtILFdBQUwsR0FBbUIsS0FBS0EsV0FBTCxDQUFpQmtELE1BQWpCLENBQXdCLFVBQVM1QyxDQUFULEVBQVk7QUFDdEQsV0FBT0EsQ0FBQyxDQUFDK0MsTUFBRixDQUFTLENBQVQsRUFBWSxDQUFaLEtBQWtCLEtBQXpCO0FBQ0EsR0FGa0IsQ0FBbkI7QUFHQSxDQUpEOztBQU1BLFNBQVNoQyxVQUFULENBQW9CaUMsR0FBcEIsRUFBeUI7QUFDeEIsTUFBSUMsR0FBRyxHQUFHLEVBQVY7QUFDQUQsRUFBQUEsR0FBRyxDQUFDbkMsT0FBSixDQUFZLFVBQVNoQixDQUFULEVBQVlxRCxDQUFaLEVBQWU7QUFDMUIsUUFBSUEsQ0FBQyxHQUFHLENBQUosSUFBUyxDQUFiLEVBQWdCO0FBQ2ZELE1BQUFBLEdBQUcsQ0FBQ0MsQ0FBQyxHQUFHLENBQUwsQ0FBSCxHQUFhO0FBQ1pDLFFBQUFBLENBQUMsRUFBR3RELENBQUMsQ0FBQ2tELE1BQUYsQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFlSyxXQUFmLEtBQStCdkQsQ0FBQyxDQUFDa0QsTUFBRixDQUFTLENBQVQsQ0FEdkI7QUFFWk0sUUFBQUEsQ0FBQyxFQUFHTCxHQUFHLENBQUNFLENBQUMsR0FBRyxDQUFMLENBRkssRUFBYjs7QUFJQTtBQUNELEdBUEQ7QUFRQSxTQUFPRCxHQUFHLENBQUNMLE1BQUosQ0FBVyxVQUFTVSxJQUFULEVBQWU7QUFDaEMsV0FBT0EsSUFBSSxDQUFDSCxDQUFMLElBQVUsTUFBVixHQUFtQixLQUFuQixHQUEyQixJQUFsQztBQUNBLEdBRk0sQ0FBUDtBQUdBOztBQUVESSxLQUFLLENBQUM1RCxTQUFOLENBQWdCNkQsR0FBaEIsR0FBc0IsWUFBVztBQUNoQyxTQUFPQyxJQUFJLENBQUNELEdBQUwsQ0FBU0UsS0FBVCxDQUFlLElBQWYsRUFBcUIsSUFBckIsQ0FBUDtBQUNBLENBRkQ7O0FBSUFILEtBQUssQ0FBQzVELFNBQU4sQ0FBZ0JnRSxHQUFoQixHQUFzQixZQUFXO0FBQ2hDLFNBQU9GLElBQUksQ0FBQ0UsR0FBTCxDQUFTRCxLQUFULENBQWUsSUFBZixFQUFxQixJQUFyQixDQUFQO0FBQ0EsQ0FGRDs7QUFJQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdkUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJCA9IGZ1bmN0aW9uKG9wdHMpIHtcblx0dGhpcy5xdWVyeSA9IFwiKjoqXCI7XG5cdHRoaXMuZW5kcG9pbnQgPSBcImh0dHBzOi8vb3BlbnNjaWVuY2UuaGFtYnVyZy5kZS9zb2xyUXVlcnkvXCI7XG5cdHRoaXMucXVlcnlzdHJpbmcgPSBbJ2ZsPWludGVybmFsX2luc3RpdHV0aW9uLHVybCx0aXRsZSxjcmVhdG9yTmFtZSxjcmVhdG9yTmFtZVVSSSxwdWJsaWNhdGlvblllYXIsbGFuZ3VhZ2UsYWJzdHJhY3QsY29sbGVjdGlvbicsJ3E9JyArIHRoaXMucXVlcnksJ3Jvd3M9MTUwJywgJ2ZhY2V0PXRydWUnLCAnZmFjZXQuc29ydD1jb3VudCddO1xuXHQ7XG5cbn07XG5cbiQucHJvdG90eXBlLmFkZEZhY2V0RmllbGQgPSBmdW5jdGlvbihmKSB7XG5cdHRoaXMucXVlcnlzdHJpbmcucHVzaCgnZmFjZXQuZmllbGQ9JyArIGYpO1xufTtcblxuJC5wcm90b3R5cGUuc3RhcnRRdWVyeSA9IGZ1bmN0aW9uKHEsIGNiKSB7XG5cdHZhciBxdWVyeXN0cmluZyA9IHRoaXMucXVlcnlzdHJpbmcuam9pbignJicpO1xuXG5cdGlmICghVGkuTmV0d29yay5vbmxpbmUpIHtcblx0XHRjYih7XG5cdFx0XHRzdWNjZXNzIDogZmFsc2Vcblx0XHR9KTtcblx0XHRyZXR1cm47XG5cdH1cblx0ZnVuY3Rpb24gc2VuZEJhY2socGF5bG9hZCkge1xuXHRcdHZhciBmYWNldHMgPSBwYXlsb2FkWydmYWNldF9jb3VudHMnXVsnZmFjZXRfZmllbGRzJ107XG5cdFx0dmFyIGZhY2V0T2JqID0ge307XG5cdFx0T2JqZWN0LmtleXMoZmFjZXRzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0ZmFjZXRPYmpba2V5XSA9IHNvcnRGYWNldHMoZmFjZXRzW2tleV0pO1xuXHRcdH0pO1xuXHRcdGNiKHtcblx0XHRcdHN1Y2Nlc3MgOiB0cnVlLFxuXHRcdFx0ZG9jcyA6IHBheWxvYWQucmVzcG9uc2UuZG9jcyxcblx0XHRcdGZhY2V0cyA6IGZhY2V0T2JqXG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoVGkuQXBwLlByb3BlcnRpZXMuaGFzUHJvcGVydHkocXVlcnlzdHJpbmcpKSB7XG5cdFx0c2VuZEJhY2soSlNPTi5wYXJzZShUaS5BcHAuUHJvcGVydGllcy5nZXRTdHJpbmcocXVlcnlzdHJpbmcpKSk7XG5cdH1cblx0dmFyIHhociA9IFRpLk5ldHdvcmsuY3JlYXRlSFRUUENsaWVudCh7XG5cdFx0b25sb2FkIDogZnVuY3Rpb24oZSkge1xuXHRcdFx0VGkuQXBwLlByb3BlcnRpZXMuc2V0U3RyaW5nKHF1ZXJ5c3RyaW5nLCB0aGlzLnJlc3BvbnNlRGF0YSk7XG5cdFx0XHRzZW5kQmFjayhKU09OLnBhcnNlKHRoaXMucmVzcG9uc2VEYXRhKSk7XG5cdFx0fSxcblx0XHRvbmVycm9yIDogZnVuY3Rpb24oRSkge1xuXHRcdFx0Y2Ioe1xuXHRcdFx0XHRzdWNjZXNzIDogZmFsc2Vcblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0dGltZW91dCA6IDUwMDAsXG5cdH0pO1xuXG5cdC8vIGRvbid0IGZvcmdldCB0aGUgdHJhaWxpbmcgLyFcblx0eGhyLm9wZW4oXCJQT1NUXCIsIHRoaXMuZW5kcG9pbnQpO1xuXHR4aHIuc2V0UmVxdWVzdEhlYWRlcihcIlNvbHJDb3JlTmFtZVwiLCBcIkhPU1wiKTtcblx0eGhyLnNlbmQocXVlcnlzdHJpbmcpO1xuXHRMb2codGhpcy5lbmRwb2ludCArICc/JysgcXVlcnlzdHJpbmcpO1xufTtcbiQucHJvdG90eXBlLnNldFF1ZXJ5ID0gZnVuY3Rpb24ocSkge1xuXHR0aGlzLnF1ZXJ5ID0gcTtcbn07XG4kLnByb3RvdHlwZS5yZXNldFF1ZXJ5ID0gZnVuY3Rpb24ocSkge1xuXHR0aGlzLnF1ZXJ5ID0gXCIqOipcIjtcbn07XG4kLnByb3RvdHlwZS5hZGRGYWNldCA9IGZ1bmN0aW9uKGYpIHtcblx0dGhpcy5xdWVyeXN0cmluZy5wdXNoKFwiZnE9XCIgKyBmKTtcblx0XG59O1xuXG4kLnByb3RvdHlwZS5oYXNGYWNldCA9IGZ1bmN0aW9uKGYpIHtcblx0cmV0dXJuIHRoaXMucXVlcnlzdHJpbmcuaW5kZXhPZihcImZxPVwiICsgZik9PS0xID8gZmFsc2UgOnRydWU7XG59O1xuXG4kLnByb3RvdHlwZS50b2dnbGVGYWNldCA9IGZ1bmN0aW9uKGYpIHtcblx0Y29uc3QgZm91bmQgPSB0aGlzLnF1ZXJ5c3RyaW5nLmluZGV4T2YoXCJmcT1cIiArIGYpO1xuXHRpZiAoZm91bmQgPT0gLTEpIHsgLy8gbm90IHlldCBmaWx0ZXJlZCA9PiBhZGRcblx0XHR0aGlzLnF1ZXJ5c3RyaW5nLnB1c2goXCJmcT1cIiArIGYpO1xuXHR9IGVsc2UgeyAgICAgIC8vIGZpbHRlcmVkID0+IHJlbW92ZVxuXHRcdHRoaXMucXVlcnlzdHJpbmcgPSB0aGlzLnF1ZXJ5c3RyaW5nLmZpbHRlcihmdW5jdGlvbihxKSB7XG5cdFx0XHRyZXR1cm4gcSAhPSBcImZxPVwiICsgZjtcblx0XHR9KTtcblx0fVxufTtcblxuJC5wcm90b3R5cGUucmVtb3ZlRmFjZXQgPSBmdW5jdGlvbihmKSB7XG5cdHRoaXMucXVlcnlzdHJpbmcgPSB0aGlzLnF1ZXJ5c3RyaW5nLmZpbHRlcihmdW5jdGlvbihxKSB7XG5cdFx0cmV0dXJuIHEgIT0gXCJmcT1cIiArIGY7XG5cdH0pO1xufTtcbiQucHJvdG90eXBlLnJlbW92ZUFsbEZhY2V0cyA9IGZ1bmN0aW9uKGYpIHtcblx0dGhpcy5xdWVyeXN0cmluZyA9IHRoaXMucXVlcnlzdHJpbmcuZmlsdGVyKGZ1bmN0aW9uKHEpIHtcblx0XHRyZXR1cm4gcS5zdWJzdHIoMCwgMykgIT0gXCJmcT1cIjtcblx0fSk7XG59O1xuXG5mdW5jdGlvbiBzb3J0RmFjZXRzKGZvbykge1xuXHR2YXIgYmFyID0gW107XG5cdGZvby5mb3JFYWNoKGZ1bmN0aW9uKGYsIGkpIHtcblx0XHRpZiAoaSAlIDIgPT0gMCkge1xuXHRcdFx0YmFyW2kgLyAyXSA9IHtcblx0XHRcdFx0ayA6IGYuc3Vic3RyKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyBmLnN1YnN0cigxKSxcblx0XHRcdFx0diA6IGZvb1tpICsgMV1cblx0XHRcdH07XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGJhci5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuXHRcdHJldHVybiBpdGVtLmsgPT0gJ051bGwnID8gZmFsc2UgOiB0cnVlO1xuXHR9KTtcbn1cblxuQXJyYXkucHJvdG90eXBlLm1heCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgdGhpcyk7XG59O1xuXG5BcnJheS5wcm90b3R5cGUubWluID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBNYXRoLm1pbi5hcHBseShudWxsLCB0aGlzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gJDtcbiJdLCJzb3VyY2VSb290IjoiL1VzZXJzL2Z1ZXJzdC9Eb2N1bWVudHMvTUxlYXJuaW5nL1NjaGF1ZmVuc3Rlci9SZXNvdXJjZXMvQ2xhc3NlcyJ9
